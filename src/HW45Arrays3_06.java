/**
 * FirstNewVersion 24.06.2020
 */
public class HW45Arrays3_06 {
    public static void main(String[] args) {
        //Arrays3-06
        // Мы скажем, что «зеркальная» секция в массиве - это группа смежных элементов,
        // так что где-то в массиве эта же группа появляется в обратном порядке.
        // Например, самая большая зеркальная секция в {1, 2, 3, 8, 9, 3, 2, 1} имеет длину 3 (часть {1, 2, 3}).
        // Возвращает размер наибольшего зеркального раздела, найденного в данном массиве.

        int[] a1 = {1, 2, 3, 8, 9, 3, 2, 1}; // 3
        int[] a2 = {1, 2, 1, 4}; //3
        int[] a3 = {7, 1, 2, 9, 7, 2, 1}; // 2

        System.out.println(maxMirror(a1));
        System.out.println(maxMirror(a2));
        System.out.println(maxMirror(a3));
    }

    public static int maxMirror(int[] array) {
        int len = array.length; //длина массива
        int count = 0; //определяет промежуточную длину зеркальной секции
        int max = 0; // max count = max mirror
        for (int i = 0; i < len; i++) { // проверяем слева направо
            count = 0; //сбрасываем count
            //второй цикл - слева направо, цикл работает, пока счетчик внешнего цикла+count не превышают длину массива и больше 0
            for (int j = len - 1; i + count < len && j >= 0; j--) {
                if (array[i + count] == array[j]) { //сравниваем индекс из внешнего цикла+count с индексом внутреннего цикла
                    count++;//если равны, увеличиваем count на 1 и повторяем цикл
                } else {
                    if (count > 0) {//если не равны, проверяем, чтобы count был больше 0
                        max = Math.max(count, max); //сравниваем длину секции, полученную с предыдущем цикле, с max
                        count = 0;//сбрасываем count, чтобы убедиться, что длина зеркальной секции не увеличивается
                    }
                }
            }
            max = Math.max(count, max);//при выходе из внутреннего цикла также сравниваем count & max
        }
        return max;
    }
}
